<?xml version="1.0" encoding="UTF-8"?>
<project name="phpUnderControl" basedir="." default="build">

    <!--
        Specify a default label
    -->
    <property name="label" value="" />

    <!--
        Include some external properties
    -->
    <property file="build.properties" />

    <!--
        Define some common directories and settings
    -->
    <property name="builddir" value="${basedir}/../build" />

    <!--
        Main build target for this project.
    -->
    <target name="build" depends="update,apidoc,test-static,test-runtime" />

    <!--
        Creates the main distributables and tests the project
    -->
    <target name="dist" depends="build,bundle" />

    <!--
        Prepares the temporary build environment.
    -->
    <target name="prepare" depends="clean,init" />

    <!--
        Create the required build directories
    -->
    <target name="init">
        <mkdir dir="${builddir}" />
        <mkdir dir="${builddir}/api" />
        <mkdir dir="${builddir}/charts" />
        <mkdir dir="${builddir}/coverage" />
        <mkdir dir="${builddir}/dist" />
        <mkdir dir="${builddir}/logs" />
        <mkdir dir="${builddir}/php-code-browser" />
    </target>

    <!--
        Removes all temporary build artifacts
    -->
    <target name="clean">
        <delete dir="${builddir}" />
    </target>

    <!--
        Update base directory from source
    -->
    <target name="update" depends="prepare">
        <exec executable="git" dir="${basedir}">
            <arg line="pull" />
        </exec>
    </target>

    <!--
        Generates the api documentation for the project's source
    -->
    <target name="apidoc" depends="prepare">
        <exec executable="phpdoc">
            <arg line="-ue on
                       --target ${builddir}/api
                       --output HTML:Phpuc:phpuc
                       --templatebase ${basedir}/data/phpdoc
                       --directory ${basedir}/src" />
        </exec>
    </target>

    <!--
        Executes several static tests against the project source.
    -->
    <target name="test-static" depends="prepare">
        <parallel>
            <antcall target="lint" />
            <antcall target="phpmd" />
            <antcall target="phpcpd" />
            <antcall target="checkstyle" />
        </parallel>
        <!-- Do not run phpmd and pdepend parallel, there is a concurrency problem -->
        <antcall target="pdepend" />
    </target>

    <!--
        Performs a simple syntax check against the project's source code.
    -->
    <target name="lint">
        <apply executable="php" logerror="true" failonerror="true">
            <arg value="-l" />
            <fileset dir="${basedir}">
                <include name="tests/**/*.php" />
                <include name="src/**/*.php" />
                <exclude name="tests/run/**/*.php" />
            </fileset>
        </apply>
    </target>

    <!--
        Checks that the project source matches the coding guidelines
    -->
    <target name="checkstyle" depends="init">
        <exec executable="phpcs" failonerror="false">
            <arg line="--report=checkstyle
                       --standard=Mapi
                       --report-file=${builddir}/logs/checkstyle.xml
                       ${basedir}/src" />
        </exec>
    </target>

    <!--
        Checks that the project source does not contain any mess
    -->
    <target name="phpmd" depends="init">
        <exec executable="phpmd" failonerror="false">
            <arg line="${basedir}/src
                       xml
                       codesize,unusedcode,naming
                       --reportfile ${builddir}/logs/pmd.xml" />
        </exec>
    </target>

    <!--
        Checks that the project source does not contain code clones
    -->
    <target name="phpcpd" depends="init">
        <exec executable="phpcpd" failonerror="false">
            <arg line="--log-pmd ${builddir}/logs/pmd-cpd.xml
                       ${basedir}/src" />
        </exec>
    </target>

    <!--
        Checks several software metrics for the project source
    -->
    <target name="pdepend" depends="init">
        <exec executable="pdepend" failonerror="false">
            <arg line="--summary-xml=${builddir}/logs/pdepend.xml
                       --jdepend-xml=${builddir}/logs/jdepend.xml
                       --jdepend-chart=${builddir}/charts/jdepend.svg
                       --overview-pyramid=${builddir}/charts/overview-pyramid.svg
                       --coderank-mode=inheritance,property,method
                       ${basedir}/src" />
        </exec>
    </target>

    <!--
        Performs a set of runtime tests against the project's source
    -->
    <target name="test-runtime" depends="prepare">
        <antcall target="phpunit" />
    </target>
    
    <!--
        Executes the unit tests for the project under test.
    -->
    <target name="phpunit">
        <exec executable="phpunit" failonerror="true">
            <arg line="--process-isolation
                       --log-junit ${builddir}/logs/junit.xml
                       --coverage-clover ${builddir}/logs/coverage.xml
                       --coverage-html ${builddir}/coverage
                       phpucAllTests ${basedir}/tests/AllTests.php" />
        </exec>
    </target>

    <target name="bundle" depends="bundle-pear-archive,bundle-zip-archive" />

    <target name="bundle-pear-archive" depends="prepare">
        <exec executable="php" failonerror="true">
            <arg line="${basedir}/bin/package.php ${basedir}" />
        </exec>

        <tstamp>
            <format property="bundle-time" pattern="yyyy-MM-dd" />
        </tstamp>

        <copy file="${basedir}/package.xml" tofile="${basedir}/package-tmp.xml">
            <filterchain>
                <replaceregex pattern="lead&gt;(\s+)&lt;date&gt;(.*)&lt;/date"
                              replace="lead&gt;\1&lt;date&gt;${bundle-time}&lt;/date"
                              flags="m"
                              byline="false">
                </replaceregex>
                <replaceregex pattern="lead&gt;(\s+)&lt;date&gt;(.*)&lt;/date&gt;(\s+)&lt;version&gt;(\s+)&lt;release&gt;(.+)&lt;"
                              replace="lead&gt;\1&lt;date&gt;\2&lt;/date&gt;\3&lt;version&gt;\4&lt;release&gt;${project.version}${label}&lt;"
                              flags="m"
                              byline="false">
                </replaceregex>
            </filterchain>
        </copy>

        <exec executable="pear" failonerror="true" dir="${basedir}">
            <arg line="package package-tmp.xml" />
        </exec>

        <move file="${basedir}/${ant.project.name}-${project.version}${label}.tgz"
              todir="${builddir}/dist/" />

        <delete file="${basedir}/package-tmp.xml" />
    </target>

    <target name="bundle-zip-archive" depends="prepare">
        <zip destfile="${builddir}/dist/${ant.project.name}-${project.version}${label}.zip">
            <fileset dir="${basedir}">
                <include name="**/*.*" />
                <exclude name=".git/**" />
                <exclude name=".gitignore" />
            </fileset>
        </zip>
    </target>
    
</project>
